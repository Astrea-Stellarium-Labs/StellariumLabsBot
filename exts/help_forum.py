import asyncio
import importlib

import interactions as ipy

import common.utils as utils


class HelpForum(ipy.Extension):
    def __init__(self, bot: ipy.Client):
        self.client = bot
        self.help_channel: ipy.GuildForum = None  # type: ignore
        self.solved_tag = 1040471298746359928
        asyncio.create_task(self.fill_help_channel())

    async def fill_help_channel(self):
        await self.bot.wait_until_ready()
        self.help_channel = await self.bot.fetch_channel(1040468265002090536)  # type: ignore

    def generate_tag_select(self, channel: ipy.GuildForum):
        tags = channel.available_tags
        options: list[ipy.StringSelectOption] = []

        for tag in tags:
            if tag.id == self.solved_tag:
                continue

            emoji = None
            if tag.emoji_id:
                emoji = ipy.PartialEmoji(
                    id=tag.emoji_id, name=tag.emoji_name or "emoji"
                )
            elif tag.emoji_name:
                emoji = ipy.PartialEmoji.from_str(tag.emoji_name)

            options.append(
                ipy.StringSelectOption(label=tag.name, value=str(tag.id), emoji=emoji)
            )

        return ipy.StringSelectMenu(
            *options,
            placeholder="Add/Remove Tags (Admin Only)",
            min_values=1,
            max_values=len(options),
            custom_id="modify_tags",
        )

    @ipy.listen("new_thread_create")
    async def first_message_for_help(self, event: ipy.events.NewThreadCreate):
        thread = event.thread
        if not thread.parent_id or int(thread.parent_id) != 1040468265002090536:
            return

        if thread.owner_id == self.bot.user.id:
            # an autogenerated thread, don't interfere
            return

        select = self.generate_tag_select(thread.parent_channel)
        close_button = ipy.Button(
            style=ipy.ButtonStyle.DANGER,
            label="Close this thread",
            custom_id="close_thread",
        )

        try:
            message = await thread.send(
                (
                    "Thank you for using the help system! Please wait for someone to"
                    " help you.\nOnce your issue is solved, press the button below to"
                    " close this thread."
                ),
                components=[[select], [close_button]],
            )
        except ipy.errors.HTTPException:
            # this tends to happen often if the "thread author has not sent their initial message"
            # techically, they already did because you can't make a thread otherwise...
            # so we're just waiting for discord to get the memo
            await asyncio.sleep(5)
            message = await thread.send(
                (
                    "Thank you for using the help system! Please wait for someone to"
                    " help you.\nOnce your issue is solved, press the button below to"
                    " close this thread."
                ),
                components=[[select], [close_button]],
            )

        await message.pin()

    @ipy.component_callback("modify_tags")
    async def modify_tags(self, ctx: ipy.ComponentContext):
        if ctx.channel.archived:
            return await ctx.defer(edit_origin=True)

        if not utils.permissions_check(ctx):
            return await ctx.send(
                "You are not allowed to edit tags for this post.", ephemeral=True
            )

        await ctx.defer(ephemeral=True)

        channel: ipy.GuildForumPost = ctx.channel  # type: ignore

        current_tags = {int(t.id) for t in channel.applied_tags}

        for tag_id in ctx.values:
            if int(tag_id) in current_tags:
                current_tags.remove(int(tag_id))
            else:
                current_tags.add(int(tag_id))

        tags = [int(v) for v in ctx.values]
        await channel.edit(applied_tags=tags)
        await ctx.send("Done!", ephemeral=True)

    @ipy.component_callback("close_thread")  # type: ignore
    async def close_help_thread(self, ctx: ipy.ComponentContext):
        if ctx.channel.archived:
            return await ctx.defer(edit_origin=True)

        if not utils.permissions_check(ctx) and ctx.author.id != ctx.channel.owner_id:
            return await ctx.send(
                "You are not allowed to close this post.", ephemeral=True
            )

        await ctx.send("Closing. Thank you for using our help system!")

        if self.solved_tag not in ctx.channel.applied_tags:
            await ctx.channel.edit(
                applied_tags=[self.solved_tag] + ctx.channel.applied_tags
            )
        await ctx.channel.edit(archived=True, locked=True)


def setup(bot):
    importlib.reload(utils)
    HelpForum(bot)
